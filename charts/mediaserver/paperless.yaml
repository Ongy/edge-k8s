---
apiVersion: v1
kind: Namespace
metadata:
  name: paperless
  labels:
    pod-security.kubernetes.io/enforce: baseline
    pod-security.kubernetes.io/enforce-version: latest

    # We are setting these to our _desired_ `enforce` level.
    pod-security.kubernetes.io/audit: restricted
    pod-security.kubernetes.io/audit-version: latest
    pod-security.kubernetes.io/warn: restricted
    pod-security.kubernetes.io/warn-version: latest
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: supervisord-config
  namespace: paperless
data:
  supervisord.conf: |-
    [supervisord]
    nodaemon=true                ; start in foreground if true; default false
    logfile=/dev/stdout          ; main log file; default $CWD/supervisord.log
    pidfile=/tmp/supervisord.pid ; supervisord pidfile; default supervisord.pid
    logfile_maxbytes=0           ; max main logfile bytes b4 rotation; default 50MB
    logfile_backups=0            ; # of main logfile backups; 0 means none, default 10
    loglevel=info                ; log level; default info; others: debug,warn,trace
    user=paperless

    [program:gunicorn]
    command=gunicorn -c /usr/src/paperless/gunicorn.conf.py paperless.asgi:application
    user=paperless
    priority = 1
    stdout_logfile=/dev/stdout
    stdout_logfile_maxbytes=0
    stderr_logfile=/dev/stderr
    stderr_logfile_maxbytes=0

    [program:consumer]
    command=python3 manage.py document_consumer
    user=paperless
    stopsignal=INT
    priority = 20
    stdout_logfile=/dev/stdout
    stdout_logfile_maxbytes=0
    stderr_logfile=/dev/stderr
    stderr_logfile_maxbytes=0

    [program:celery]

    command = celery --app paperless worker --loglevel INFO
    user=paperless
    stopasgroup = true
    stopwaitsecs = 60
    priority = 5
    stdout_logfile=/dev/stdout
    stdout_logfile_maxbytes=0
    stderr_logfile=/dev/stderr
    stderr_logfile_maxbytes=0

    [program:celery-beat]

    command = celery --app paperless beat --loglevel INFO
    user=paperless
    stopasgroup = true
    priority = 10
    stdout_logfile=/dev/stdout
    stdout_logfile_maxbytes=0
    stderr_logfile=/dev/stderr
    stderr_logfile_maxbytes=0

    [program:celery-flower]
    command = /usr/local/bin/flower-conditional.sh
    user = paperless
    startsecs = 0
    priority = 40
    stdout_logfile=/dev/stdout
    stdout_logfile_maxbytes=0
    stderr_logfile=/dev/stderr
    stderr_logfile_maxbytes=0
---
apiVersion: v1
kind: PersistentVolume
metadata:
  annotations:
    pv.kubernetes.io/provisioned-by: smb.csi.k8s.io
  name: printer-cifs-pv
  namespace: paperless
spec:
  capacity:
    storage: 16Gi
  accessModes:
    - ReadOnlyMany
  persistentVolumeReclaimPolicy: Retain
  storageClassName: ""
  claimRef:
    name: paperless-printer-pvc
    namespace: paperless
  mountOptions:
    - dir_mode=0777
    - file_mode=0777
  csi:
    driver: smb.csi.k8s.io
    readOnly: true
    # volumeHandle format: {smb-server-address}#{sub-dir-name}#{share-name}
    # make sure this value is unique for every share in the cluster
    volumeHandle: //192.168.128.200/MEMORYCARD##
    volumeAttributes:
      source: "//192.168.128.200/MEMORYCARD"
    nodeStageSecretRef:
      name: smbcreds
      namespace: paperless
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: paperless-printer-pvc
  namespace: paperless
spec:
  accessModes:
    - ReadOnlyMany
  resources:
    requests:
      storage: 1Gi
  storageClassName: "" # Empty string must be explicitly set otherwise default StorageClass will be set
  volumeName: printer-cifs-pv
---
apiVersion: cert-manager.io/v1
kind: Certificate
metadata:
  name: psql-client-secret
  namespace: paperless
spec:
  isCA: false
  duration: 8760h # 1 years
  commonName: paperless
  secretName: psql-client-secret
  privateKey:
    algorithm: ECDSA
    size: 256
  issuerRef:
    name: psql-ca-issuer
    kind: ClusterIssuer
    group: cert-manager.io
---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app: broker
  name: broker
  namespace: paperless
spec:
  replicas: 1
  selector:
    matchLabels:
      app: broker
  template:
    metadata:
      labels:
        app: broker
    spec:
      volumes:
        - name: redis-data
          nfs:
            path: /srv/share/backed/appdata/paperless/redis
            server: mario.local.ongy.net
            readOnly: false
      containers:
        - image: docker.io/library/redis:7
          securityContext:
            seccompProfile:
              type: RuntimeDefault
            capabilities:
              drop: ['ALL']
              add: ['NET_BIND_SERVICE']
            allowPrivilegeEscalation: false
            readOnlyRootFilesystem: true
            runAsNonRoot: true
            runAsUser: 999
            runAsGroup: 1000
            privileged: false
          name: broker
          volumeMounts:
            - mountPath: "/data"
              name: redis-data
---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app: core
  name: core
  namespace: paperless
spec:
  replicas: 1
  selector:
    matchLabels:
      app: core
  template:
    metadata:
      labels:
        app: core
    spec:
      securityContext:
        fsGroup: 1000
        fsGroupChangePolicy: "OnRootMismatch"
      volumes:
        - name: scan-data
          persistentVolumeClaim:
            claimName: paperless-printer-pvc
        - name: supervisord-config
          configMap:
            name: supervisord-config
        - name: tmp-dir
          emptyDir:
            medium: Memory
            sizeLimit: 500Mi
        - name: var-log
          emptyDir:
            medium: Memory
            sizeLimit: 500Mi
        - name: paperless-data
          nfs:
            path: /srv/share/backed/appdata/paperless/data
            server: mario.local.ongy.net
            readOnly: false
        - name: paperless-media
          nfs:
            path: /srv/share/backed/appdata/paperless/media
            server: mario.local.ongy.net
            readOnly: false
        - name: paperless-export
          nfs:
            path: /srv/share/backed/appdata/paperless/export
            server: mario.local.ongy.net
            readOnly: false
        - name: paperless-consume
          nfs:
            path: /srv/share/backed/appdata/paperless/consume
            server: mario.local.ongy.net
            readOnly: false
        - name: psql-tls-secrets
          secret:
            secretName: psql-client-secret
            optional: false
            defaultMode: 0640
      containers:
        - image: alpine
          name: consume-loop
          command: [sh]
          args:
            - -eu
            - -c
            - |
              DB="/data/.consumed.txt"
              touch "${DB}"

              consume() {
                for file in `find /scans -type f -iname \*.pdf`; do
                  if grep -q "${file}" "${DB}"; then continue; fi
                  cp "${file}" /consume
                  echo "${file}" >> "${DB}"
                  echo Processed file "${file}"
                done
              }

              consume
              # Doing it like this makes it easier to stop the process via signal!
              while sleep 1800 ; do
                consume
              done
          securityContext:
            seccompProfile:
              type: RuntimeDefault
            capabilities:
              drop: ['ALL']
            allowPrivilegeEscalation: false
            readOnlyRootFilesystem: true
            runAsNonRoot: true
            runAsUser: 1000
            runAsGroup: 1000
            privileged: false
          volumeMounts:
            - mountPath: "/consume"
              name: paperless-consume
              readOnly: false
            - mountPath: "/scans"
              name: scan-data
              readOnly: true
            - mountPath: "/data"
              name: paperless-data
        - image: cr.local.ongy.net/paperless-ngx/paperless-ngx:latest
          command: ['/usr/local/bin/supervisord']
          args:
          - -c
          - /etc/supervisord.conf
          securityContext:
            seccompProfile:
              type: RuntimeDefault
            capabilities:
              drop: ['ALL']
              add: ['NET_BIND_SERVICE']
            allowPrivilegeEscalation: false
            readOnlyRootFilesystem: true
            runAsNonRoot: true
            runAsUser: 1000
            runAsGroup: 1000
            privileged: false
          readinessProbe:
            httpGet:
              path: /
              port: 8000
              httpHeaders:
              - name: Host
                value: paperless.local.ongy.net
          env:
          - name: PAPERLESS_AUTO_LOGIN_USERNAME
            value: admin
          - name: PAPERLESS_DBHOST
            value: "psql.psql"
          - name: PAPERLESS_REDIS
            value: "redis://broker:6379"
          - name: PAPERLESS_DBSSLMODE
            value: "verify-ca"
          - name: PAPERLESS_DBSSLROOTCERT
            value: "/psql-tls-secrets/..data/ca.crt"
          - name: PAPERLESS_DBSSLCERT
            value: "/psql-tls-secrets/..data/tls.crt"
          - name: PAPERLESS_DBSSLKEY
            value: "/psql-tls-secrets/..data/tls.key"
          - name: PAPERLESS_TIME_ZONE
            value: "Europe/Berlin"
          - name: PAPERLESS_ADMIN_USER
            value: "admin"
          - name: PAPERLESS_ADMIN_PASSWORD
            value: "password"
          - name: PAPERLESS_URL
            value: https://paperless.local.ongy.net
          name: core
          volumeMounts:
            - mountPath: "/etc/supervisord.conf"
              name: supervisord-config
              subPath: supervisord.conf
            - mountPath: "/tmp/"
              name: tmp-dir
            - mountPath: "/var/log/supervisord"
              name: var-log
            - mountPath: "/usr/src/paperless/data"
              name: paperless-data
            - mountPath: "/usr/src/paperless/media"
              name: paperless-media
            - mountPath: "/usr/src/paperless/export"
              name: paperless-export
            - mountPath: "/usr/src/paperless/consume"
              name: paperless-consume
            - name: psql-tls-secrets
              mountPath: "/psql-tls-secrets"
              readOnly: true
---
apiVersion: v1
kind: Service
metadata:
  name: core
  namespace: paperless
spec:
  selector:
    app: core
  ports:
    - protocol: TCP
      port: 8000
      name: http
---
apiVersion: v1
kind: Service
metadata:
  name: broker
  namespace: paperless
spec:
  selector:
    app: broker
  ports:
    - protocol: TCP
      port: 6379
      name: http
---
apiVersion: networking.istio.io/v1beta1
kind: VirtualService
metadata:
  name: paperless
spec:
  gateways: [istio-system/gateway]
  hosts: [paperless.local.ongy.net]
  http:
  - route:
    - destination:
        host: core.paperless.svc.cluster.local
---
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: core
  namespace: paperless
spec:
  podSelector:
    matchLabels:
      app: core
  policyTypes:
    - Ingress
    - Egress
  ingress:
    - from:
        - namespaceSelector:
            matchLabels:
              kubernetes.io/metadata.name: istio-system
      ports:
        - protocol: TCP
          port: 8000
  egress:
    - to:
        - namespaceSelector:
            matchLabels:
              kubernetes.io/metadata.name: psql
      ports:
        - protocol: TCP
          port: 5432
    - to:
        - namespaceSelector:
            matchLabels:
              kubernetes.io/metadata.name: paperless
      ports:
        - protocol: TCP
          port: 6379
    - to:
        - namespaceSelector:
            matchLabels:
              kubernetes.io/metadata.name: kube-system
      ports:
        - protocol: UDP
          port: 53
    - to:
      # imap.fastmail.com resolved 2023-05-08
        - ipBlock:
            cidr: 103.168.172.58/32
        - ipBlock:
            cidr: 103.168.172.43/32
      # - ipBlock:
      #      cidr: 0.0.0.0/0
      #      except:
      #        - 10.0.0.0/8
      #        - 192.168.0.0/16
      ports:
        - protocol: TCP
          port: 993
---
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: broker
  namespace: paperless
spec:
  podSelector:
    matchLabels:
      app: broker
  policyTypes:
    - Ingress
    - Egress
  ingress:
    - from:
        - namespaceSelector:
            matchLabels:
              kubernetes.io/metadata.name: paperless
      ports:
        - protocol: TCP
          port: 6379
---
apiVersion: security.istio.io/v1beta1
kind: AuthorizationPolicy
metadata:
  name: mediaserver-authorization
  namespace: istio-system
spec:
  action: CUSTOM
  provider:
    # The provider name must match the extension provider defined in the mesh config.
    # You can also replace this with sample-ext-authz-http to test the other external authorizer definition.
    name: authentik-ext-authz-http
  rules:
  # The rules specify when to trigger the external authorizer.
  - to:
    - operation:
        hosts:
        - "paperless.local.ongy.net"

