---
apiVersion: v1
kind: Namespace
metadata:
  name: jellyfin
  
  labels:
    # Need some more time debugging the client to disable privileged!
    #pod-security.kubernetes.io/enforce: baseline
    #pod-security.kubernetes.io/enforce-version: latest

    # We are setting these to our _desired_ `enforce` level.
    pod-security.kubernetes.io/audit: restricted
    pod-security.kubernetes.io/audit-version: latest
    pod-security.kubernetes.io/warn: restricted
    pod-security.kubernetes.io/warn-version: latest
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: jellyfin-mpv-log-reader
  namespace: jellyfin
---
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  namespace: jellyfin
  name: log-reader
rules:
- apiGroups: [""] # "" indicates the core API group
  resources: ["pods", "pods/log"]
  verbs: ["get"]
---
apiVersion: rbac.authorization.k8s.io/v1
# This role binding allows "jane" to read pods in the "default" namespace.
# You need to already have a Role named "pod-reader" in that namespace.
kind: RoleBinding
metadata:
  name: jellyfin-mpv-log-reader
  namespace: jellyfin
subjects:
# You can specify more than one "subject"
- kind: ServiceAccount
  name: jellyfin-mpv-log-reader # "name" is case sensitive
  namespace: jellyfin
roleRef:
  # "roleRef" specifies the binding to a Role / ClusterRole
  kind: Role #this must be Role or ClusterRole
  name: log-reader # this must match the name of the Role or ClusterRole you wish to bind to
  apiGroup: rbac.authorization.k8s.io
---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app: jellyfin
  name: jellyfin
  namespace: jellyfin
spec:
  replicas: 1
  selector:
    matchLabels:
      app: jellyfin
  template:
    metadata:
      labels:
        app: jellyfin
    spec:
      nodeSelector:
        kubernetes.io/hostname: mario
      volumes:
        - name: jellyfin-config
          hostPath:
            path: "/srv/share/backed/appdata/jellyfin/"
            type: Directory
        - name: media-data
          hostPath:
            path: "/srv/share/media/"
            type: Directory
      containers:
        - image: jellyfin/jellyfin:latest
          env:
          - name: JELLYFIN_DATA_DIR
            value: /config/data
          - name: JELLYFIN_CONFIG_DIR
            value: /config
          - name: JELLYFIN_CACHE_DIR
            value: /config/cache
          securityContext:
            seccompProfile:
              type: RuntimeDefault
            capabilities:
              drop: ['ALL']
            allowPrivilegeEscalation: false
            readOnlyRootFilesystem: false
            privileged: false
            runAsNonRoot: true
            runAsUser: 1000
            runAsGroup: 1004
          readinessProbe:
            httpGet:
              path: /health
              port: 8096
          name: jellyfin
          volumeMounts:
            - mountPath: "/config"
              name: jellyfin-config
            - mountPath: "/data"
              name: media-data
---
apiVersion: v1
kind: Service
metadata:
  name: jellyfin
  namespace: jellyfin
spec:
  selector:
    app: jellyfin
  ports:
    - protocol: TCP
      port: 8096
      name: http
---
apiVersion: networking.istio.io/v1beta1
kind: VirtualService
metadata:
  name: jellyfin
spec:
  gateways: [istio-system/gateway]
  hosts: [jellyfin.local.ongy.net]
  http:
  - route:
    - destination:
        host: jellyfin.jellyfin.svc.cluster.local
---
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: jellyfin
  namespace: jellyfin
spec:
  podSelector:
    matchLabels:
      app: jellyfin
  policyTypes:
    - Ingress
    - Egress
  ingress:
    - from:
        - namespaceSelector:
            matchLabels:
              kubernetes.io/metadata.name: istio-system
        - namespaceSelector:
            matchLabels:
              kubernetes.io/metadata.name: jellyfin
        - namespaceSelector:
            matchLabels:
              kubernetes.io/metadata.name: homeassistant
      ports:
        - protocol: TCP
          port: 8096
  # Allow egress to outside (track etc.)
  egress:
    - to:
        - namespaceSelector:
            matchLabels:
              kubernetes.io/metadata.name: kube-system
      ports:
        - protocol: UDP
          port: 53
    - to:
        - ipBlock:
            cidr: 0.0.0.0/0
            except:
              - 10.0.0.0/8
              - 192.168.0.0/16
      ports:
        - protocol: TCP
          port: 80
        - protocol: TCP
          port: 443
---
apiVersion: apps/v1
kind: DaemonSet
metadata:
  labels:
    app: jellyfin-mpv
  name: jellyfin-mpv
  namespace: jellyfin
spec:
  selector:
    matchLabels:
      app: jellyfin-mpv
  template:
    metadata:
      labels:
        app: jellyfin-mpv
    spec:
      terminationGracePeriodSeconds: 5
      serviceAccountName: jellyfin-mpv-log-reader
      nodeSelector:
        graphics: wayland
      volumes:
        - name: tmp-dir
          emptyDir:
            medium: Memory
            sizeLimit: 500Mi
        - name: user-run
          hostPath:
            path: "/run/user/1000/"
            type: Directory
        - name: config-home
          hostPath:
            path: "/home/ongy/.config/jellyfin-mpv-shim/"
            type: Directory
        - name: x11-unix
          hostPath:
            path: "/tmp/.X11-unix/"
            type: Directory
        - name: kube-root-ca
          configMap:
            name: kube-root-ca.crt
      containers:
        - image: cr.local.ongy.net/jellyfin-mpv-shim:latest
          env:
          - name: XDG_RUNTIME_DIR
            value: "/run/user/1000/"
          - name: WAYLAND_DISPLAY
            value: "invalid"
          - name: DISPLAY
            value: ":0"
          - name: KUBERNETES_NAMESPACE
            valueFrom:
              fieldRef:
                fieldPath: metadata.namespace
          - name: KUBERNETES_POD
            valueFrom:
              fieldRef:
                fieldPath: metadata.name
          securityContext:
            seccompProfile:
              type: RuntimeDefault
            capabilities:
              drop: ['ALL']
            runAsNonRoot: true
            runAsUser: 1000
            runAsGroup: 110
            privileged: true
          name: jellyfin-mpv
          volumeMounts:
            - mountPath: "/run/user/1000"
              name: user-run
            - mountPath: "/home/jellyfin/.config/jellyfin-mpv-shim"
              name: config-home
            - mountPath: "/tmp/.X11-unix/"
              name: x11-unix
            - mountPath: "/tmp/"
              name: tmp-dir
            - mountPath: "/etc/kube-ca.crt"
              name: kube-root-ca
              subPath: ca.crt
          livenessProbe:
            exec:
              command:
              - sh
              - -e
              - -c
              - "curl --ca-cert /etc/kube-ca.crt -s https://${KUBERNETES_SERVICE_HOST}:${KUBERNETES_SERVICE_PORT_HTTPS}/api/v1/namespaces/${KUBERNETES_NAMESPACE}/pods/${KUBERNETES_POD}/log?sinceSeconds=60 -H \"Authorization: Bearer $(cat /var/run/secrets/kubernetes.io/serviceaccount/token)\" | grep -q -e KeepAlive -e /Sessions/Playing/Progress"
            timeoutSeconds: 5
            initialDelaySeconds: 15
            failureThreshold: 2
            periodSeconds: 15
---
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: jellyfin-mpv
  namespace: jellyfin
spec:
  podSelector:
    matchLabels:
      app: jellyfin-mpv
  policyTypes:
    - Ingress
    - Egress
  egress:
    - to:
        - podSelector:
            matchLabels:
              app: jellyfin
      ports:
        - protocol: TCP
          port: 8096
    - to:
        - namespaceSelector:
            matchLabels:
              kubernetes.io/metadata.name: kube-system
      ports:
        - protocol: UDP
          port: 53
    # Allow to contact the API-server for the liveness probe
    # There seems to be some bug in cilium that prevents these
#    - to:
#        - ipBlock:
#            cidr: 10.96.0.1/32
#      ports:
#        - protocol: TCP
#          port: 443
#        - protocol: TCP
#          port: 6443
#    - to:
#        - ipBlock:
#            cidr: 192.168.128.188/32
#      ports:
#        - protocol: TCP
#          port: 443
#        - protocol: TCP
#          port: 6443
---
apiVersion: "cilium.io/v2"
kind: CiliumNetworkPolicy
metadata:
  name: "jellyfin-mpv-to-apiserver"
  namespace: jellyfin
spec:
  endpointSelector:
    matchLabels:
      app: jellyfin-mpv
  egress:
  - toEntities:
    - kube-apiserver

